import socket
import select
import threading
import sys
import time
import random

#AF_NET e adresata na socket-ot
#SOL_SOCKET tipot na socket-ot
#SOCK_STREAM udp konekcija
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

#proverka na broj na argumentite
if len(sys.argv) != 3:
    print ("vnesuvaj po sledniot redosled : skripta, IP adresa, broj na slobodna porta")
    exit()

#ja vnesuvam IP adresata
IP_address = str(sys.argv[1])
#ja vnesuvam portata
Port = int(sys.argv[2])

#pravam vrzuvanje
server.bind((IP_address, Port))
server.listen(100)

list_of_clients=[]


#tuka gi chuvam prashanjata
Q = [" Shto oznachuva DNS?      \n a.Default Name System  b.Distinct Names Server  c.Domain Name Server  d.Domain Name System", #1
     " Kolku nivoa postojat vo OSI sistemot?      \n a.7   b.8   c.6  d.5",#2
     " Koi porti se rezervirani za HTTP?        \n a.20/21   b.80/81   c.52/53   d.77/78",#3
     " Kolku e dolga IPv4?        \n a.32   b.64    c.128    d.256",#4
     " Koj redosled na biti se koristi niz mrezhata za prenos?      \n a.Big-Endian     b.Little-Endian    c.Long-Endian     d.Short-Endian",#5
     " Kakva e podatochnata struktura list vo python?       \n a.mutable     b.immutable     c.fixed     d.unique",#6
     " Kolku e dolga IPv6?        \n a.128    b.64    c.256    d.32",#7
     " Koja od slednite TCP funkcii e blokirachka?      \n a.accept     b.read     c.listen     d.bound",#8
     " Koja od slednite UDP funkcii e blokirachka?       \n a.recvfrom        b.bind      c.sendto       d.sendto",#9
     " Kolkva e brojot na porti kaj edna mashina?        \n a.256       b.65 404    c.65 536       d.2^32",#10
    ]

#tuka gi chuvam odgovorite
A = ['d', 'a', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'c']

Count=[]
client = ["address",-1]
bzr =[0, 0, 0] 

def clientthread(conn, addr):
    conn.send("Dobredojde vo kvizot! Za da pobedish treba da odgovorish tochno 5 prashanja\n Klikni na koe bilo kopche za start!\n")
    while True:
            message = conn.recv(2048)
            if message:
                if bzr[0]==0:
                    client[0] = conn
                    bzr[0] = 1
                    i = 0
                    while i < len(list_of_clients):
                            if list_of_clients[i] == client[0]:
                                break
                            i +=1
                    client[1] = i

                elif bzr[0] ==1 and conn==client[0]:
                        bol = message[0] == A[bzr[2]][0]
                        print (A[bzr[2]][0])
                        if bol:
                            broadcast("igrach" + str(client[1]+1) + " +1" + "\n\n") #se sobiraat poenite
                            Count[i] += 1
                            if Count[i]==5:
                                broadcast("igrach" + str(client[1]+1) + " pobedi!" + "\n") #imeto na korisnikot koj pobedil
                                end_quiz()
                                sys.exit()

                        else:
                            broadcast("igrach" + str(client[1]+1) + " -1" + "\n\n") #se odzemaat poeni za greshka
                            Count[i] -= 1
                        bzr[0]=0
                        if len(Q) != 0:
                            Q.pop(bzr[2])
                            A.pop(bzr[2])
                        if len(Q)==0:
                            end_quiz()
                        quiz()

                else:
                        conn.send(" igrach " + str(client[1]+1) + " klikna prv\n\n")
            else:
                    remove(conn)

def broadcast(message):
    for clients in list_of_clients:
        try:
            clients.send(message)
        except:
            clients.close()
            remove(clients)
def end_quiz():
        broadcast("Kraj na igrata\n")
        bzr[1]=1
        i = Count.index(max(Count))
        broadcast("igrachot " + str(i+1)+ " pobedi!! Ima osvoeno "+str(Count[i])+" poeni.")
        for x in range(len(list_of_clients)):
            list_of_clients[x].send("Imate osvoeno " + str(Count[x]) + " poeni.")
            
        server.close()


def quiz():
    bzr[2] = random.randint(0,10000)%len(Q)
    if len(Q) != 0:
        for connection in list_of_clients:
            connection.send(Q[bzr[2]])
def remove(connection):
    if connection in list_of_clients:
        list_of_clients.remove(connection)


while True:
    conn, addr = server.accept()
    list_of_clients.append(conn)
    Count.append(0)
    print (addr[0] + " povrzano")
    threading._start_new_thread(clientthread,(conn,addr))
    if(len(list_of_clients)==3):
        quiz()
conn.close()
server.close()